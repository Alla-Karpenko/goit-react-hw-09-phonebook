{"version":3,"sources":["redux/contact/contact-operations.js","redux/contact/contact-selectors.js","components/ContactList/ContactList.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.js","components/Filters/Filters.js","components/contactsEditor/contactsEditor.js"],"names":["name","number","dispatch","a","contacts","addContactsRequest","axios","post","data","addContactsSuccess","addContactsError","message","contactsId","deleteContactsRequest","delete","then","deleteContactsSuccess","catch","error","deleteContactsError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getContacts","state","items","getFilter","filter","getvisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactItem","id","onRemove","className","type","onClick","connect","contactsSelectors","onRemoveContact","contactOperations","map","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ContactForm","useDispatch","useSelector","useState","setName","setNumber","useEffect","handleChange","e","target","console","warn","onSubmit","preventDefault","some","alert","pattern","title","required","onChange","placeholder","Filter","changeFilter","ContactsEditor"],"mappings":"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","file":"static/js/3.986185a3.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n  addContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  deleteContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contact-actions';\n\nconst fetchContacts = (name, number) => async dispatch => {\n  const contacts = { name, number };\n  \n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts', contacts);\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\n\nconst addContacts = (name, number) => async dispatch => {\n  const contacts = { name, number };\n\n  dispatch(addContactsRequest());\n  try {\n    const { data } = await axios.post(\"/contacts\", contacts);\n    dispatch(addContactsSuccess(data));\n  } catch (error) {\n    dispatch(addContactsError(error.message)); \n  }\n};\n\nconst deleteContact = contactsId => dispatch => {\n    dispatch(deleteContactsRequest());\n\n    axios\n      .delete(`/contacts/${contactsId}`)\n      .then(() => dispatch(deleteContactsSuccess(contactsId)))\n      .catch((error) => deleteContactsError(error.message));\n}\n\nexport default {\n  addContacts,\n  deleteContact,\n  fetchContacts,\n}; ","import { createSelector } from '@reduxjs/toolkit';\nconst getContacts = state => state.contacts.items;\n \nconst getFilter = state => state.contacts.filter;\n\nconst getvisibleContacts = createSelector(\n    [ getContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter((contact) =>\n           contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    },\n)\nexport default {\n  getContacts,\n  getFilter,\n  getvisibleContacts,\n};","import './ContactList.scss';\nimport { connect } from 'react-redux';\nimport { contactOperations, contactsSelectors } from \"../../redux/contact\";\n\nconst ContactItem = ({ id, name, number , onRemove }) => {\n    return (\n        <li className=\"Contact-List\" key={id}> \n            {name}: {number} <button className=\"Button-List\" type=\"submit\" onClick={() => onRemove(id)}>Delete</button>\n        </li>\n    )\n}\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n    return (\n      <ul>\n        {contacts.map((contact) => (\n          <ContactItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n            onRemove={onRemoveContact}\n          />\n        ))}\n      </ul>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: contactsSelectors.getvisibleContacts(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemoveContact: (id) => dispatch(contactOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useState} from 'react';\nimport './ContactForm.scss';\nimport { contactOperations, contactsSelectors } from \"../../redux/contact\";\nimport { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n\n  useEffect((name,number) => {\n    dispatch(contactOperations.fetchContacts(name, number))\n  }, [dispatch]);\n\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n  \n    if (!name) {\n      return;\n    }\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(contactOperations.addContacts(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return console.warn(`Тип поля $(name) не обрабатывается`);;\n    };\n  };\n\n \n    return (\n      <form className=\"Form\" onSubmit={handleSubmitForm}>\n        <label className=\"Label\">\n          Name{\" \"}\n          <input\n            className=\"Input\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={handleChange}\n            placeholder=\"name\"\n          />\n        </label>\n        <label>\n          Number{\" \"}\n          <input\n            className=\"Input\"\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={handleChange}\n          />\n        </label>\n        <button className=\"Button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Filters.scss\";\nimport { contactsSelectors, changeFilter } from \"../../redux/contact\";\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(contactsSelectors.getFilter);\n  const onChange = (e) => dispatch(changeFilter(e.target.value));\n  return (\n    <>\n      <h3> Find contacts by me </h3>\n      <input\n        className=\"Input-Filter\"\n        type=\"text\"\n        name=\"\"\n        value={filter}\n        onChange={onChange}\n      />\n    </>\n  );\n};\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   changeFilter: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = (state) => ({\n//   filter: contactsSelectors.getFilter(state),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   changeFilter: (e) => dispatch(changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport ContactList from '../ContactList';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filters';\n\nimport './contactsEditor.scss';\n\nexport default function ContactsEditor() {\n \n    return (\n        <div className=\"Phonebook\">\n         <h1 className=\"Phonebook-title\">Phonebook</h1>\n         <ContactForm />\n         <h2>Contacts</h2>\n\n         <Filter />\n\n         <ContactList />\n        </div>\n    );   \n}\n \n\n\n\n\n\n"],"sourceRoot":""}